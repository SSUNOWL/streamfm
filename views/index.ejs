<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="/main.css" rel="stylesheet">
    <title>Video Player</title>
</head>
<body class="grey-bg">
    <%- include('nav.ejs') %>

    <div class="container">
        <div class="header">
            <div class="title"><h4></h4></div>
            <span class="is_connect"><h4></h4></span>
        </div>

        <div class="user_list"></div>
        <div class="now_playing"></div>

        <div class="playhead">
            <div id="ctime"></div>
            <div class="progress">
                <div class="progress_filled"></div>
            </div>
            <div id="time"></div>
            <input type="button" value="Live" onclick="golive()">
            <% if ( data.islogin) { %>
            <input type="button" value="다음 곡" onclick="skip()">
            <% } %>
            <h2>Volume</h2>
            <input id="mute_btn" type="button" value="음소거 해제">
            <input id="volume_bar" class="volume_bar" type="range" value="<%= data.volume %>" min="0" step="1" max="100" oninput="play_volume()">
        </div>

        <div class="player-container">
          <label class="custom-checkbox">
            <input type="checkbox" id="videoToggle" class="view" onclick="view()">
            <span class="checkmark"></span>
            비디오 보기
          </label>
          <div class="player" id="player"></div>
        </div> 

    </div>

    <div class="container playlist-container">
        <h4>Playlist

        <% if (data.loop) { %>
          <label class="custom-checkbox">
            <input type="checkbox" class="loop" checked>
            <span class="checkmark"></span>
            <h5 style="margin-top:20px;">Loop</h5>
          </label>
        <% } else { %>
          <label class="custom-checkbox">
            <input type="checkbox" class="loop" >
            <span class="checkmark"></span>
            <h5 style="margin-top:20px;">Loop</h5>

          </label>
        <% } %>
        </h4>
        <div class="playlist">
            <% for (var i = 0; i < data.list.length; i++) { %>
                <div class="playlist-item" id="<%= data.list[i].videoId %>">
                    <div><%= data.list[i].title %> <%= data.secto(data.list[i].length) %></div>
                    <% if ( data.islogin) { %>
                    <div class="button-group">
                        <input value="새로운 제안 받기" type="button" class="new_suggest_btn" data-videoid="<%= data.list[i].videoId %>" data-title="<%= data.list[i].title %>" data-length="<%= data.list[i].length %>">
                        <input value="삭제" type="button" class="delete_btn" data-videoid="<%= data.list[i].videoId %>" data-title="<%= data.list[i].title %>" data-length="<%= data.list[i].length %>">
                    </div>
                    <% } %>
                </div>
            <% } %>
        </div>

        <h4>Suggestions</h4>
        <div class="suggestion">
            <% for (var i = 0; i < data.suggestion.length; i++) { %>
                <div class="suggestion-item" id="<%= data.suggestion[i].videoId %>">
                    <div><%= data.suggestion[i].title %> <%= data.secto(data.suggestion[i].length) %></div>
                    <% if ( data.islogin) { %>
                    <div class="button-group">
                        <input type="button" value="추가" class="suggest_add_btn" data-videoid="<%= data.suggestion[i].videoId %>" data-title="<%= data.suggestion[i].title %>" data-length="<%= data.suggestion[i].length %>">
                        <input value="삭제" type="button" class="delete_btn" data-videoid="<%= data.suggestion[i].videoId %>" data-title="<%= data.suggestion[i].title %>" data-length="<%= data.suggestion[i].length %>">
                    </div>
                    <% } %>
                </div>
            <% } %>
        </div>
    </div>
    
    <div class="container search-container">
      <% if ( data.islogin) { %>
        <input class="word" type="text" placeholder="검색어 입력">
        <input class="submit" value="검색" type="button" onclick="search_word()">
        <div class="search_result"></div>
      <% } %>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/socket.io@4.7.2/client-dist/socket.io.min.js"></script>


    

    <script>
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '360',
          width: '640',
          videoId: "<%= data.videoId %>",
          playerVars: { 'autoplay': 1, 'controls': 0 },
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange,
            'onError' : onPlayerError
          }
        });
      }
      const socket = io({
        reconnection: true,
        reconnectionAttempts: 5,
      })
    
      // socket.emit('add-join', { roomId : `<%= data.roomId %>`})


      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        var now = new Date()
        var started = new Date('<%= data.started %>')
        
        event.target.seekTo(parseInt((now - started) / 1000 ))
        event.target.mute()
        event.target.playVideo();
        event.target.setVolume(`<%= data.volume %> `);
        document.querySelector('.title').querySelector('h4').innerText = "<%= data.title %>"
        document.querySelector('.now_playing').innerText = `<%= data.videoId %>`
        document.getElementById('time').innerText = secto(`<%= data.length %>`)

        golive()
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {

        console.log(event.target.getPlayerState())
        // socket.emit('log', { roomId : `<%= data.roomId %>`, player_state : event.target.getPlayerState(), duration: event.target.getDuration()})

        


        if ( event.target.getPlayerState() == 0 ) {
          
            emit_onended(false, false)
            //끝나면 실행
        }
      }

      function onPlayerError(event) {
        console.log(event.data)
        if ( event.data == 101 || event.data == 150) {
          
          console.log('동영상 소유자가 재생하지 못하게함')
          skip()
        } else {
          console.log("네트워크 오류")
        }
        
      }

      socket.on('connect', () => {
        var now = new Date()
        console.log(now + '연결됨')
        socket.emit('add-join', { roomId : `<%= data.roomId %>`})
        document.querySelector('.is_connect').querySelector('h4').innerText = "connected!"
        golive()
      })
            
      socket.on('disconnect', () => {
        var now = new Date()
        console.log(now + "연결이 끊김")
        document.querySelector('.is_connect').querySelector('h4').innerText = "연결이 끊겼습니다. 페이지를 새로고침 해주세요"

      })

      socket.on('connected', (data) => {
        document.querySelector('.user_list').innerHTML = ""
        for ( var i = 0 ; i < data.room_num.length ; i++) {
          var id_div = document.createElement("div")
          id_div.setAttribute('class', "white-bg")
          id_div.setAttribute('id', data.room_num[i].socketid)
          var div = document.createElement('div')
          div.innerText = data.room_num[i].username
          id_div.appendChild(div)
          document.querySelector('.user_list').appendChild(id_div)

        }
      })

      socket.on('disconnected', (data) => {
        document.querySelector('.user_list').removeChild(document.getElementById(data.socketid))

      })

      socket.on("error", (error) => {
        console.error(error)
      })

      socket.on('load', (data) => {
            // console.log(data.detail)
            var playlist = document.querySelector('.playlist')
            var suggestion = document.querySelector('.suggestion')
            var nextId = data.videoId
            player.loadVideoById(data.videoId)
            document.querySelector('.title').querySelector('h4').innerText = data.title
            document.querySelector('.now_playing').innerText = nextId
            document.getElementById('time').innerText = secto(data.length)

            refresh(data.list, data.suggestion)
            
      })

      var setI = setInterval(() => {      
        const percent = (player.getCurrentTime()/player.getDuration())*100
        const progressBar = document.querySelector('.progress_filled')
        progressBar.style.flexBasis = `${percent}%`;
        
        const ctime = document.getElementById('ctime')
        ctime.innerText = secto(player.getCurrentTime())
      }, 1000)

      function search_word() {
        const query = document.querySelector('.word').value;
        fetch(`/search?word=${query}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        }).then(async (r) => {
            var result = await r.json();
                const searchResult = document.querySelector('.search_result');
                searchResult.innerHTML = '';

                result.forEach(item => {
                    const resultItem = document.createElement('div');
                    resultItem.className = 'playlist-item '; // 검색 결과에 playlist-item 클래스 적용
                    resultItem.setAttribute('id', item.Id)
                    resultItem.innerHTML = `
                        <div>${item.Title} ${item.length} ${item.channelTitle}</div>
                        <div class="button-group">
                            <input type="button" value="추가" class="search_add_btn" data-videoid="${item.Id}" data-title="${item.Title}" data-length="${item.length}">
                        </div>
                    `;
                    searchResult.appendChild(resultItem);
                });
         });
        }


      
    function add_song(videoId, title, length, suggest) {
        fetch(`/add`, {
            method : 'POST',
            headers : {'Content-Type' : 'application/json'},
            body : JSON.stringify({
              roomId : `<%= data.roomId %>`,
              videoId : videoId,
              title : title,
              length : length,
              suggest : suggest
            })
        })
      } 

      function delete_song(videoId, title, length, suggest) {
        fetch('/delete', {
          method : 'POST',
          headers : {'Content-Type' : 'application/json'},
          body : JSON.stringify({
              roomId : `<%= data.roomId %>`,
              videoId : videoId,
              title : title,
              length : length,
              suggest : suggest
          })
        })
      }

      socket.on('add', (data) => {
        // console.log(data)
        var playlist = document.querySelector('.playlist')
        var suggestion = document.querySelector('.suggestion')
        var search = document.querySelector('.search_result')
       
        if ( search.children[data.videoId]) {
          if ( !data.suggest ) {
            search.removeChild(search.children[data.videoId])
          }
        }
        refresh(data.list, data.suggestion)
        
        
      })
      
      socket.on('delete', (data) => {
        var playlist = document.querySelector('.playlist')
        var suggestion = document.querySelector('.suggestion')

        if ( data.isskip ) {
          emit_onended(true, true)
        } else {
            refresh(data.list, data.suggestion)
        }
      })

      function new_suggestion(videoId, title, length) {;
        fetch('/new_suggestion', {
          method : 'POST',
          headers : {'Content-Type' : 'application/json'},
          body : JSON.stringify({
              roomId : `<%= data.roomId %>`,
              videoId : videoId,
              
          })
        })
      }

      socket.on('new_suggestion', (data) => {
        refresh(data.list, data.suggestion)
      })
      
      socket.on('golive', (data) => {
        golive()
      })

      function skip() {
        emit_onended(true, false)
      }

      function golive() {
        fetch(`/golive`, {
            method : 'POST',
            headers : {'Content-Type' : 'application/json'},
            body : JSON.stringify({
              roomId : `<%= data.roomId %>`
            })
        }).then(async(r) => {

          var result = await r.text()
          result = JSON.parse(result)       
          player.playVideo();
             
          var now = new Date()
          var started = new Date(result)
          player.seekTo(parseInt((now - started) / 1000 ))

          
        })
      }
      
      
      socket.on('loop', (data) => {
        document.querySelector('.loop').checked = data.loop
      })

      function play_volume(e) {
        var play_volume = document.getElementById('volume_bar').value
        player.setVolume(play_volume)
        player.unMute()
        if (player.isMuted()) {
          player.unMute()
          document.getElementById('mute_btn').value = "음소거"
        }
        fetch(`/update_volume?volume=${play_volume}`, {
            method : 'POST',
            headers : {'Content-Type' : 'application/json'}
        })       
      }

      
      function view() {
        if (document.querySelector('.view').checked ) {
          document.querySelector(".player").style['display'] = 'block'
        } else {
          document.querySelector('.player').style['display'] = 'none'
        }
      }

      function emit_onended(skip, deleted) {
        socket.emit('onended', {
          roomId : '<%= data.roomId %>',
          videoId : document.querySelector('.now_playing').innerText,
          duration : player.getDuration(),
          skip : skip,
          deleted : deleted
        })
      }

      function refresh(list, suggestion) {
            const playlist = document.querySelector('.playlist');
            const suggestionContainer = document.querySelector('.suggestion');

            // 기존 내용 초기화
            playlist.innerHTML = '';
            suggestionContainer.innerHTML = '';

            // Playlist 항목 추가
            list.forEach(item => {
                const newItem = document.createElement('div');
                newItem.className = 'playlist-item';
                newItem.id = item.videoId;

                newItem.innerHTML = `
                    <div>${item.title} ${secto(item.length)}</div>

                    <div class="button-group">
                        <input value="새로운 제안 받기" type="button" class="new_suggest_btn" data-videoid="${item.videoId}" data-title="${item.title}" data-length="${item.length}">
                        <input value="삭제" type="button" class="delete_btn" data-videoid="${item.videoId}" data-title="${item.title}" data-length="${item.length}">
                    </div>
                `;

                playlist.appendChild(newItem);
            });

            // Suggestions 항목 추가
            suggestion.forEach(item => {
                const newSuggestion = document.createElement('div');
                newSuggestion.className = 'suggestion-item';
                newSuggestion.id = item.videoId;

                newSuggestion.innerHTML = `
                    <div>${item.title} ${secto(item.length)}</div>
                    <div class="button-group">
                        <input type="button" value="추가" class="suggest_add_btn" data-videoid="${item.videoId}" data-title="${item.title}" data-length="${item.length}">
                        <input value="삭제" type="button" class="delete_btn" data-videoid="${item.videoId}" data-title="${item.title}" data-length="${item.length}">
                    </div>
                `;
                suggestionContainer.appendChild(newSuggestion);
            });
            console.log(`<%=data.islogin%>`)

            if ( `<%=data.islogin%>` == 'false') {
              const notlogin = document.querySelectorAll('.button-group')
              notlogin.forEach(element => {
                element.remove();
              });
            }
        }
      function secto(seconds) {
          seconds = parseInt(seconds)
          var hour = parseInt(seconds/3600) < 10 ? '0' + parseInt(seconds/3600) : parseInt(seconds/3600);
          var min = parseInt((seconds%3600)/60) < 10 ? '0' + parseInt((seconds%3600)/60) : parseInt((seconds%3600)/60);
          var sec = seconds%60 < 10 ? '0' + seconds%60 : seconds%60;

          return hour == '00' ? min + ":" + sec : hour + ":" + min + ":" + sec
        }

      function timeto(timeString) {
        var a = timeString.match(/:/g).length
        var hours, minutes, seconds
        a < 2 ?  ([minutes, seconds] = timeString.split(':').map(Number), hours = 0) :  ([hours, minutes, seconds] = timeString.split(':').map(Number));
        return hours * 3600 + minutes * 60 + seconds;
      }

      document.addEventListener('DOMContentLoaded', () => {
            const playlistContainer = document.querySelector('.playlist');
            const suggestionContainer = document.querySelector('.suggestion');
            const searchContainer = document.querySelector('.search-container');
            // Playlist 버튼에 이벤트 리스너 추가
            playlistContainer.addEventListener('click', function(event) {
                const target = event.target;

                // 새로운 제안 받기 버튼 클릭 시
                if (target.classList.contains('new_suggest_btn')) {
                    const videoId = target.getAttribute('data-videoid');
                    const title = target.getAttribute('data-title');
                    const length = target.getAttribute('data-length');
                    new_suggestion(videoId, title, length);
                }

                // 삭제 버튼 클릭 시
                if (target.classList.contains('delete_btn')) {
                    const videoId = target.getAttribute('data-videoid');
                    const title = target.getAttribute('data-title');
                    const length = target.getAttribute('data-length');
                    delete_song(videoId, title, length, false);
                }
            });

            // Suggestions 버튼에 이벤트 리스너 추가
            suggestionContainer.addEventListener('click', function(event) {
                const target = event.target;

                // 추가 버튼 클릭 시
                if (target.classList.contains('suggest_add_btn')) {
                    const videoId = target.getAttribute('data-videoid');
                    const title = target.getAttribute('data-title');
                    const length = target.getAttribute('data-length');
                    add_song(videoId, title, length, true);
                }

                // 삭제 버튼 클릭 시
                if (target.classList.contains('delete_btn')) {
                    const videoId = target.getAttribute('data-videoid');
                    const title = target.getAttribute('data-title');
                    const length = target.getAttribute('data-length');
                    delete_song(videoId, title, length, true);
                }
            });
            searchContainer.addEventListener('click', function(event) {
                const target = event.target;

                // 추가 버튼 클릭 시
                if (target.classList.contains('search_add_btn')) {
                    const videoId = target.getAttribute('data-videoid');
                    const title = target.getAttribute('data-title');
                    const length = target.getAttribute('data-length');
                    add_song(videoId, title, length, false);
                }
                // 검색 버튼 클릭 시
                if ( target.classList.contains('submit')) {
                  search_word()
                }
            });


            // 볼륨 조절 슬라이더 이벤트 리스너 추가
            document.getElementById('volume_bar').addEventListener('input', play_volume);

            // 음소거 버튼 클릭 시
            document.getElementById('mute_btn').addEventListener('click', () => {
                if (player.isMuted()) {
                    player.unMute();
                    document.getElementById('mute_btn').value = "음소거";
                } else {
                    player.mute();
                    document.getElementById('mute_btn').value = "음소거 해제";
                }
            });

            // 반복 체크박스 변경 시
            document.querySelector('.loop').addEventListener('change', () => {
                const loop_btn = document.querySelector('.loop');
                fetch(`/loop`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        roomId: `<%= data.roomId %>`,
                        loop: loop_btn.checked  
                    })
                });
            });
        });

    </script>
  </body>
</html>